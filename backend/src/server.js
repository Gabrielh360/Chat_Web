const { WebSocketServer, WebSocket } = require("ws")
const dotenv = require("dotenv")

// Importa o mÃ³dulo dotenv para carregar variÃ¡veis de ambiente a partir de um arquivo .env.
dotenv.config()

// Cria uma instÃ¢ncia do servidor WebSocket que escuta na porta especificada na variÃ¡vel de ambiente PORT, ou na porta 8080 se a variÃ¡vel nÃ£o estiver definida.
const wss = new WebSocketServer({ port: process.env.PORT || 8080 })

// MantÃ©m o contador de usuÃ¡rios online.
let usersOnline = 0; 

// Define um callback para o evento connection. Sempre que um novo cliente se conecta, o cÃ³digo dentro desta funÃ§Ã£o Ã© executado.
wss.on("connection", (ws) => {
    usersOnline++; // Incrementa o contador de usuÃ¡rios online.
    broadcastUserCount(); // Chama a funÃ§Ã£o para enviar a contagem de usuÃ¡rios para todos os clientes conectados.

    // Adiciona um handler para o evento error do WebSocket, que loga erros no console.
    ws.on("error", console.error)

    // Adiciona um handler para o evento message. Quando uma mensagem Ã© recebida de um cliente, ela Ã© enviada para todos os outros clientes conectados.
    ws.on("message", (data) => {
        //  Itera sobre todos os clientes conectados e envia a mensagem recebida para cada um.
        wss.clients.forEach((client) => client.send(data.toString()))
    })

    // Adiciona um handler para o evento close, quando um cliente se desconecta
    ws.on("close", () => {
        usersOnline--; // Decrementa o contador de usuÃ¡rios online.
        broadcastUserCount(); // Atualiza a contagem para todos os clientes.
    });

    // Loga uma mensagem no console sempre que um novo cliente se conecta.
    console.log("client connected")
})

// Define uma funÃ§Ã£o para criar e enviar uma mensagem com a contagem atual de usuÃ¡rios online.
const broadcastUserCount = () => {
    // Cria um objeto de mensagem com a contagem de usuÃ¡rios e o converte para uma string JSON. 
    const userCountMessage = JSON.stringify({
        userId: "",
        userName: "",
        userColor: "",
        content: `ğŸ‘¥ ${usersOnline}`,
        systemMessage: true
    });

    // tera sobre todos os clientes conectados e envia a mensagem de contagem para cada cliente que estÃ¡ com o estado de conexÃ£o OPEN.
    wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(userCountMessage);
        }
    });
};

